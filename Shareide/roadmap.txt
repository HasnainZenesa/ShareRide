/roadmap.txt:
--------------------------------------------------------------------------------
  1 | 0) Product foundations (1–2 days)
  2 | 
  3 | Define & lock:
  4 | 
  5 | Target users: Passenger, Rider, Admin.
  6 | 
  7 | Regions, currencies (PKR), languages (en/ur).
  8 | 
  9 | Core business rules:
 10 | 
 11 | Riders pay monthly subscription to be discoverable / go online.
 12 | 
 13 | Passenger sees riders nearby only (within rider’s configured radius & platform cap).
 14 | 
 15 | Chat/Call buttons hidden until passenger has active subscription.
 16 | 
 17 | Risk & compliance: KYC for riders, basic privacy policy & TOS.
 18 | 
 19 | Deliverables: PRD (problem, users, flows), success metrics, glossary.
 20 | 
 21 | 1) Architecture & stack (2–3 days)
 22 | 
 23 | High-level design:
 24 | 
 25 | Mobile app (React Native) with role-aware navigation (Passenger/Rider).
 26 | 
 27 | Backend services (REST + WebSocket).
 28 | 
 29 | DB: PostgreSQL + PostGIS (geo), Redis (geo-cache, queues, sessions).
 30 | 
 31 | Infra: Docker Compose (dev), later EAS / CI pipelines.
 32 | 
 33 | Observability: Sentry (errors), basic logging, health checks.
 34 | 
 35 | Deliverables: System architecture diagram, sequence diagrams for 3 flows:
 36 | 
 37 | Rider application → Admin approval
 38 | 
 39 | Passenger subscription gating (unlock chat/call)
 40 | 
 41 | Trip request → match → accept → complete
 42 | 
 43 | 2) Data model & contracts (2–3 days)
 44 | 
 45 | Entities (first pass):
 46 | 
 47 | users (role: passenger/rider/admin, status)
 48 | 
 49 | riders (kyc_status, home_location, radius_km, is_online)
 50 | 
 51 | subscriptions (user_id or rider_id? — you: passenger subscription gates chat/call; riders also pay monthly plan to go online → keep both or separate plans)
 52 | 
 53 | trips (pickup, dropoff, status, fare)
 54 | 
 55 | rider_locations (current coords)
 56 | 
 57 | payouts, payment_methods, attachments (KYC docs)
 58 | 
 59 | Geo rules:
 60 | 
 61 | Use PostGIS for storage + queries; Redis GEO for fast candidate shortlist.
 62 | 
 63 | Distance thresholds: platform cap (e.g., 8–10km) ∩ rider’s radius_km.
 64 | 
 65 | API surface (names only, no code):
 66 | 
 67 | Auth: /auth/otp/request, /auth/otp/verify, /auth/refresh
 68 | 
 69 | Admin: /admin/riders/pending, /admin/riders/:id/approve|reject, /admin/stats/overview
 70 | 
 71 | Riders: /riders/me, /riders/apply, /riders/online|offline, /riders/location
 72 | 
 73 | Subs: /subs/passenger/start|status, /subs/rider/start|status
 74 | 
 75 | Trips: /trips/quote, /trips, /trips/:id/cancel, /trips/:id
 76 | 
 77 | Realtime (WS): rides:search, rides:offer, rides:accept/reject, rides:status:*
 78 | 
 79 | Chat: /chat/token (server issues room/token post-subscription check) or via WS namespace
 80 | 
 81 | Deliverables: ERD, endpoint list, request/response JSON examples in a spec doc.
 82 | 
 83 | 3) Environment setup (2–3 days)
 84 | 
 85 | Docker Compose: Postgres (with PostGIS), Redis, API stub, Worker stub.
 86 | 
 87 | Secrets strategy (.env templates, do not commit keys).
 88 | 
 89 | Health endpoints + smoke tests.
 90 | 
 91 | Basic migrations (init tables) and admin bootstrap (first admin user).
 92 | 
 93 | Deliverables: Running local stack + README with start commands, env setup guide.
 94 | 
 95 | 4) Admin foundations (1–1.5 weeks)
 96 | 
 97 | Goal: Admin can see everything and approve riders.
 98 | 
 99 | Admin auth (email+password or OTP for now).
100 | 
101 | Dashboard metrics: total users, riders, pending applications, active subscriptions, daily rides.
102 | 
103 | Rider approval queue: list → details → approve / reject (with reason).
104 | 
105 | Config screen: platform max_search_radius, pricing base, payouts cycle.
106 | 
107 | Audit logging for admin actions.
108 | 
109 | Deliverables: Admin flow spec, dashboard wireframes, metrics definitions, role middleware rules.
110 | 
111 | 5) Rider onboarding & subscription (1.5–2 weeks)
112 | 
113 | Rider flow:
114 | 
115 | Signup → Apply as Rider → upload docs → set home_location + radius_km.
116 | 
117 | State machine: draft → submitted → under_review → approved/rejected.
118 | 
119 | Post-approval: must have active monthly subscription to toggle Online.
120 | 
121 | Payments: create product/price (monthly), start subscription, webhook to update subscriptions table.
122 | 
123 | Online/Offline: when Online, background location updates (every X sec) to WS or REST; visibility only if subscription active.
124 | 
125 | Deliverables: Rider application screens (spec), admin review SOP, subscription logic doc, state machine chart.
126 | 
127 | 6) Passenger subscription gate (1 week)
128 | 
129 | Business rule: Chat/Call options appear only if passenger has active subscription.
130 | 
131 | Subscription purchase flow for passengers.
132 | 
133 | After success: toggle UI flags to show Chat & Call on rider cards and during an active trip.
134 | 
135 | Server-side guard: chat/call token/room issued only if active passenger subscription.
136 | 
137 | Deliverables: UX states (before/after purchase), backend gating rules, unit tests for gates.
138 | 
139 | 7) Nearby search & matching (2 weeks)
140 | 
141 | Phase A: Nearby discovery
142 | 
143 | Passenger enters pickup → server returns nearby riders (top N by distance/ETA).
144 | 
145 | Use Redis GEO for quick shortlist; verify with PostGIS + ranking (distance + rating + acceptance rate).
146 | 
147 | Phase B: Offer & acceptance
148 | 
149 | Start trip: quote/price; create trip in created state.
150 | 
151 | Server sends offer to first K riders (WebSocket).
152 | 
153 | First accept within timeout wins; others auto-rejected; trip becomes accepted.
154 | 
155 | Phase C: Live updates
156 | 
157 | Status transitions: arriving → in_progress → completed/canceled.
158 | 
159 | Location stream (rider → passenger live map).
160 | 
161 | Notifications: offer, accepted, arriving, complete.
162 | 
163 | Deliverables: Matching algorithm spec, timeouts & retries table, message contracts for WS.
164 | 
165 | 8) Payments & payouts (2 weeks)
166 | 
167 | Passenger payments
168 | 
169 | Pre-auth (optional) on trip create; capture on completed.
170 | 
171 | Refund flows on cancel/driver no-show.
172 | 
173 | Rider payouts
174 | 
175 | Weekly/bi-weekly aggregation of completed trips → payout batch → transfer via gateway/bank file → mark paid.
176 | 
177 | Statements (downloadable invoice/receipt).
178 | 
179 | Deliverables: Payment sequence diagrams, payout policy doc, edge cases matrix (declines, reversals).
180 | 
181 | 9) Chat & Call (1–1.5 weeks)
182 | 
183 | Choose provider: Twilio (programmable chat/voice) or any RTC service.
184 | 
185 | Access control: server issues room/token only if hasActivePassengerSubscription == true and there’s an active trip between the two parties (or pre-trip window).
186 | 
187 | Push notifications for new message / incoming call.
188 | 
189 | Data retention & abuse controls (report/block).
190 | 
191 | Deliverables: ACL matrix, abuse/reporting SOP, retention policy.
192 | 
193 | 10) App polish & reliability (2 weeks)
194 | 
195 | Error states, offline handling, retry policies.
196 | 
197 | Permissions UX (location, notifications, microphone for call).
198 | 
199 | Accessibility & localization (EN/UR).
200 | 
201 | Analytics: funnels (search→offer→accept→start→complete), subscription conversions.
202 | 
203 | Sentry integration, crash thresholds, performance budgets.
204 | 
205 | Deliverables: UX checklist, analytics events catalog, SLOs (latency, availability).
206 | 
207 | 11) Security & compliance (ongoing, formal review in week 10–11)
208 | 
209 | JWT + refresh rotation; per-device session tracking.
210 | 
211 | RBAC: admin vs rider vs passenger routes.
212 | 
213 | Rate limits (OTP, search, chat).
214 | 
215 | Validate & sanitize inputs (Zod/JOI).
216 | 
217 | Protect PII (encryption at rest for sensitive fields), presigned URLs for doc access.
218 | 
219 | Audit logs for all admin & financial actions.
220 | 
221 | Backups & restoration drills (DB/Redis snapshots).
222 | 
223 | Deliverables: Threat model, rate limit table, incident runbook, backup SOP.
224 | 
225 | 12) Testing & release plan (last 1–2 weeks of MVP)
226 | 
227 | Test layers: unit (domain), integration (API+DB), e2e (happy paths), load test for matching.
228 | 
229 | Device matrix: low/mid/high Android; some iOS if possible.
230 | 
231 | Go/No-Go checklist: auth, rider approval, nearby, subscription gates, payments capture/refund, chat/call gate.
232 | 
233 | Staging → pilot cohort (20–50 users/riders) → collect feedback → fix → v1.
234 | 
235 | Deliverables: Test plan, pilot feedback doc, release notes, rollback plan.
236 | 
237 | Day-to-day execution (agile rhythm)
238 | 
239 | Sprints: 1 week.
240 | 
241 | Backlog epics:
242 | 
243 | Auth & Admin
244 | 
245 | Rider onboarding & approvals
246 | 
247 | Subscriptions (passenger & rider)
248 | 
249 | Nearby & Matching
250 | 
251 | Trip lifecycle
252 | 
253 | Payments & Payouts
254 | 
255 | Chat & Call
256 | 
257 | Observability & Security
258 | 
259 | Each story has: acceptance criteria, API contract (if any), UI states, test cases, analytics events.
260 | 
261 | Metrics (define early)
262 | 
263 | Activation: % riders approved, time to approval.
264 | 
265 | Matching: time to first offer, offer acceptance rate, cancel rate.
266 | 
267 | Reliability: WS disconnects, location lag, 95p API latency.
268 | 
269 | Monetization: passenger subscription conversion, rider subscription renewal, ARPU.
270 | 
271 | Quality: average rating, support tickets per 100 trips.
272 | 
273 | Risks & mitigations
274 | 
275 | Location accuracy: use fused location + min accuracy filter; smooth with last N points.
276 | 
277 | Sparse supply: increase radius stepwise; queue mechanism & retry intervals.
278 | 
279 | Payment disputes: clear refund rules, strong receipts, support tooling.
280 | 
281 | Abuse in chat/call: report/block, limited windows, server-side recording metadata (if policy allows).
282 | 
283 | Scaling: separate WS service, use Redis pub/sub; shard geo keys by city.
284 | 
285 | What you should do next (actionable)
286 | 
287 | Freeze business rules (exact gates for chat/call & subscription types).
288 | 
289 | Approve architecture diagram + ERD + endpoint list (no code yet).
290 | 
291 | Spin up dev environment (Docker Compose) and verify health endpoints.
292 | 
293 | Start Admin + Rider onboarding epics first (approval flow is your platform gate).
294 | 
295 | In parallel, draft subscription flows (both passenger & rider).
296 | 
297 | Only then move to nearby + matching and trip lifecycle.
298 | 
299 | Chat/Call last (after gating & trip lifecycle is stable).
300 | 
301 | If you want, I can turn this into a Jira-ready backlog with epics → stories → acceptance criteria (still no code) and a weekly timeline.